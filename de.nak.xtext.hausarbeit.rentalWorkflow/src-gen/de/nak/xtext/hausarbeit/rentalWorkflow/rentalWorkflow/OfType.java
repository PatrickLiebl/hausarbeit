/**
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Of Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow.RentalWorkflowPackage#getOfType()
 * @model
 * @generated
 */
public enum OfType implements Enumerator
{
  /**
   * The '<em><b>Initializing</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INITIALIZING_VALUE
   * @generated
   * @ordered
   */
  INITIALIZING(0, "initializing", "initializing"),

  /**
   * The '<em><b>Creating</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CREATING_VALUE
   * @generated
   * @ordered
   */
  CREATING(1, "creating", "creating"),

  /**
   * The '<em><b>Beginning</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BEGINNING_VALUE
   * @generated
   * @ordered
   */
  BEGINNING(2, "beginning", "beginning"),

  /**
   * The '<em><b>Running</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RUNNING_VALUE
   * @generated
   * @ordered
   */
  RUNNING(3, "running", "running"),

  /**
   * The '<em><b>Cancelling</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CANCELLING_VALUE
   * @generated
   * @ordered
   */
  CANCELLING(4, "cancelling", "cancelling"),

  /**
   * The '<em><b>Replacing</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #REPLACING_VALUE
   * @generated
   * @ordered
   */
  REPLACING(5, "replacing", "replacing"),

  /**
   * The '<em><b>Enstoring</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ENSTORING_VALUE
   * @generated
   * @ordered
   */
  ENSTORING(6, "enstoring", "enstoring"),

  /**
   * The '<em><b>Finishing</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FINISHING_VALUE
   * @generated
   * @ordered
   */
  FINISHING(7, "finishing", "finishing");

  /**
   * The '<em><b>Initializing</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Initializing</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INITIALIZING
   * @model name="initializing"
   * @generated
   * @ordered
   */
  public static final int INITIALIZING_VALUE = 0;

  /**
   * The '<em><b>Creating</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Creating</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CREATING
   * @model name="creating"
   * @generated
   * @ordered
   */
  public static final int CREATING_VALUE = 1;

  /**
   * The '<em><b>Beginning</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Beginning</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BEGINNING
   * @model name="beginning"
   * @generated
   * @ordered
   */
  public static final int BEGINNING_VALUE = 2;

  /**
   * The '<em><b>Running</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Running</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #RUNNING
   * @model name="running"
   * @generated
   * @ordered
   */
  public static final int RUNNING_VALUE = 3;

  /**
   * The '<em><b>Cancelling</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Cancelling</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CANCELLING
   * @model name="cancelling"
   * @generated
   * @ordered
   */
  public static final int CANCELLING_VALUE = 4;

  /**
   * The '<em><b>Replacing</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Replacing</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #REPLACING
   * @model name="replacing"
   * @generated
   * @ordered
   */
  public static final int REPLACING_VALUE = 5;

  /**
   * The '<em><b>Enstoring</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Enstoring</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ENSTORING
   * @model name="enstoring"
   * @generated
   * @ordered
   */
  public static final int ENSTORING_VALUE = 6;

  /**
   * The '<em><b>Finishing</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Finishing</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FINISHING
   * @model name="finishing"
   * @generated
   * @ordered
   */
  public static final int FINISHING_VALUE = 7;

  /**
   * An array of all the '<em><b>Of Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final OfType[] VALUES_ARRAY =
    new OfType[]
    {
      INITIALIZING,
      CREATING,
      BEGINNING,
      RUNNING,
      CANCELLING,
      REPLACING,
      ENSTORING,
      FINISHING,
    };

  /**
   * A public read-only list of all the '<em><b>Of Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<OfType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Of Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static OfType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      OfType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Of Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static OfType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      OfType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Of Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static OfType get(int value)
  {
    switch (value)
    {
      case INITIALIZING_VALUE: return INITIALIZING;
      case CREATING_VALUE: return CREATING;
      case BEGINNING_VALUE: return BEGINNING;
      case RUNNING_VALUE: return RUNNING;
      case CANCELLING_VALUE: return CANCELLING;
      case REPLACING_VALUE: return REPLACING;
      case ENSTORING_VALUE: return ENSTORING;
      case FINISHING_VALUE: return FINISHING;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private OfType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //OfType
