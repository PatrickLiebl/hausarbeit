/*
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalWorkflow.serializer;

import com.google.inject.Inject;
import de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow.Event;
import de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow.RentalWorkflow;
import de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow.RentalWorkflowPackage;
import de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow.State;
import de.nak.xtext.hausarbeit.rentalWorkflow.services.RentalWorkflowGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RentalWorkflowSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RentalWorkflowGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RentalWorkflowPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RentalWorkflowPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case RentalWorkflowPackage.RENTAL_WORKFLOW:
				sequence_RentalWorkflow(context, (RentalWorkflow) semanticObject); 
				return; 
			case RentalWorkflowPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID ofType=ofEventType)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RentalWorkflowPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RentalWorkflowPackage.Literals.EVENT__NAME));
			if (transientValues.isValueTransient(semanticObject, RentalWorkflowPackage.Literals.EVENT__OF_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RentalWorkflowPackage.Literals.EVENT__OF_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getOfTypeOfEventTypeEnumRuleCall_1_0(), semanticObject.getOfType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RentalWorkflow returns RentalWorkflow
	 *
	 * Constraint:
	 *     (name=ID event+=Event* states+=State* startState+=[State|QualifiedName] finishState+=[State|QualifiedName])
	 */
	protected void sequence_RentalWorkflow(ISerializationContext context, RentalWorkflow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID events+=[Event|ID]* transition+=[State|QualifiedName])
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
