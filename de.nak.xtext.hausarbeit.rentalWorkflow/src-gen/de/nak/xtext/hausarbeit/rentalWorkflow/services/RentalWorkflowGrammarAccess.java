/*
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalWorkflow.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RentalWorkflowGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RentalWorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.nak.xtext.hausarbeit.rentalWorkflow.RentalWorkflow.RentalWorkflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRentalWorkflowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineWorkflowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEventsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventEventParserRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Keyword cStartStateKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStartStateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cStartStateStateCrossReference_8_0 = (CrossReference)cStartStateAssignment_8.eContents().get(0);
		private final RuleCall cStartStateStateQualifiedNameParserRuleCall_8_0_1 = (RuleCall)cStartStateStateCrossReference_8_0.eContents().get(1);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cFinishStateKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cFinishStateAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cFinishStateStateCrossReference_11_0 = (CrossReference)cFinishStateAssignment_11.eContents().get(0);
		private final RuleCall cFinishStateStateQualifiedNameParserRuleCall_11_0_1 = (RuleCall)cFinishStateStateCrossReference_11_0.eContents().get(1);
		private final Keyword cEndKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//RentalWorkflow:
		//	{RentalWorkflow} 'defineWorkflow' name=ID 'events' event+=Event* 'end' states+=State* 'startState'
		//	startState+=[State|QualifiedName] 'end' 'finishState' finishState+=[State|QualifiedName] 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{RentalWorkflow} 'defineWorkflow' name=ID 'events' event+=Event* 'end' states+=State* 'startState'
		//startState+=[State|QualifiedName] 'end' 'finishState' finishState+=[State|QualifiedName] 'end'
		public Group getGroup() { return cGroup; }
		
		//{RentalWorkflow}
		public Action getRentalWorkflowAction_0() { return cRentalWorkflowAction_0; }
		
		//'defineWorkflow'
		public Keyword getDefineWorkflowKeyword_1() { return cDefineWorkflowKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'events'
		public Keyword getEventsKeyword_3() { return cEventsKeyword_3; }
		
		//event+=Event*
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_4_0() { return cEventEventParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//states+=State*
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
		
		//'startState'
		public Keyword getStartStateKeyword_7() { return cStartStateKeyword_7; }
		
		//startState+=[State|QualifiedName]
		public Assignment getStartStateAssignment_8() { return cStartStateAssignment_8; }
		
		//[State|QualifiedName]
		public CrossReference getStartStateStateCrossReference_8_0() { return cStartStateStateCrossReference_8_0; }
		
		//QualifiedName
		public RuleCall getStartStateStateQualifiedNameParserRuleCall_8_0_1() { return cStartStateStateQualifiedNameParserRuleCall_8_0_1; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
		
		//'finishState'
		public Keyword getFinishStateKeyword_10() { return cFinishStateKeyword_10; }
		
		//finishState+=[State|QualifiedName]
		public Assignment getFinishStateAssignment_11() { return cFinishStateAssignment_11; }
		
		//[State|QualifiedName]
		public CrossReference getFinishStateStateCrossReference_11_0() { return cFinishStateStateCrossReference_11_0; }
		
		//QualifiedName
		public RuleCall getFinishStateStateQualifiedNameParserRuleCall_11_0_1() { return cFinishStateStateQualifiedNameParserRuleCall_11_0_1; }
		
		//'end'
		public Keyword getEndKeyword_12() { return cEndKeyword_12; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.nak.xtext.hausarbeit.rentalWorkflow.RentalWorkflow.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOfTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOfTypeOfEventTypeEnumRuleCall_1_0 = (RuleCall)cOfTypeAssignment_1.eContents().get(0);
		
		//Event:
		//	name=ID ofType=ofEventType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ofType=ofEventType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//ofType=ofEventType
		public Assignment getOfTypeAssignment_1() { return cOfTypeAssignment_1; }
		
		//ofEventType
		public RuleCall getOfTypeOfEventTypeEnumRuleCall_1_0() { return cOfTypeOfEventTypeEnumRuleCall_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.nak.xtext.hausarbeit.rentalWorkflow.RentalWorkflow.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEventsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEventsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cEventsEventCrossReference_2_2_0 = (CrossReference)cEventsAssignment_2_2.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_2_2_0_1 = (RuleCall)cEventsEventCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cTransitionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTransitionStateCrossReference_4_0 = (CrossReference)cTransitionAssignment_4.eContents().get(0);
		private final RuleCall cTransitionStateQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTransitionStateCrossReference_4_0.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//	'state' name=ID ('events' '{' events+=[Event]+ '}')? 'transition' transition+=[State|QualifiedName] 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID ('events' '{' events+=[Event]+ '}')? 'transition' transition+=[State|QualifiedName] 'end'
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('events' '{' events+=[Event]+ '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'events'
		public Keyword getEventsKeyword_2_0() { return cEventsKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//events+=[Event]+
		public Assignment getEventsAssignment_2_2() { return cEventsAssignment_2_2; }
		
		//[Event]
		public CrossReference getEventsEventCrossReference_2_2_0() { return cEventsEventCrossReference_2_2_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_2_2_0_1() { return cEventsEventIDTerminalRuleCall_2_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//'transition'
		public Keyword getTransitionKeyword_3() { return cTransitionKeyword_3; }
		
		//transition+=[State|QualifiedName]
		public Assignment getTransitionAssignment_4() { return cTransitionAssignment_4; }
		
		//[State|QualifiedName]
		public CrossReference getTransitionStateCrossReference_4_0() { return cTransitionStateCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getTransitionStateQualifiedNameParserRuleCall_4_0_1() { return cTransitionStateQualifiedNameParserRuleCall_4_0_1; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.nak.xtext.hausarbeit.rentalWorkflow.RentalWorkflow.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class OfEventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.nak.xtext.hausarbeit.rentalWorkflow.RentalWorkflow.ofEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNextClickableEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNextClickableNextClickableKeyword_0_0 = (Keyword)cNextClickableEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSavableEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSavableSavableKeyword_1_0 = (Keyword)cSavableEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteableEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDeleteableDeletableKeyword_2_0 = (Keyword)cDeleteableEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ofEventType:
		//	nextClickable | savable | deleteable='deletable';
		public EnumRule getRule() { return rule; }
		
		//nextClickable | savable | deleteable='deletable'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nextClickable
		public EnumLiteralDeclaration getNextClickableEnumLiteralDeclaration_0() { return cNextClickableEnumLiteralDeclaration_0; }
		
		//'nextClickable'
		public Keyword getNextClickableNextClickableKeyword_0_0() { return cNextClickableNextClickableKeyword_0_0; }
		
		//savable
		public EnumLiteralDeclaration getSavableEnumLiteralDeclaration_1() { return cSavableEnumLiteralDeclaration_1; }
		
		//'savable'
		public Keyword getSavableSavableKeyword_1_0() { return cSavableSavableKeyword_1_0; }
		
		//deleteable='deletable'
		public EnumLiteralDeclaration getDeleteableEnumLiteralDeclaration_2() { return cDeleteableEnumLiteralDeclaration_2; }
		
		//'deletable'
		public Keyword getDeleteableDeletableKeyword_2_0() { return cDeleteableDeletableKeyword_2_0; }
	}
	
	private final RentalWorkflowElements pRentalWorkflow;
	private final EventElements pEvent;
	private final StateElements pState;
	private final QualifiedNameElements pQualifiedName;
	private final OfEventTypeElements eOfEventType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RentalWorkflowGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRentalWorkflow = new RentalWorkflowElements();
		this.pEvent = new EventElements();
		this.pState = new StateElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.eOfEventType = new OfEventTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.nak.xtext.hausarbeit.rentalWorkflow.RentalWorkflow".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RentalWorkflow:
	//	{RentalWorkflow} 'defineWorkflow' name=ID 'events' event+=Event* 'end' states+=State* 'startState'
	//	startState+=[State|QualifiedName] 'end' 'finishState' finishState+=[State|QualifiedName] 'end';
	public RentalWorkflowElements getRentalWorkflowAccess() {
		return pRentalWorkflow;
	}
	
	public ParserRule getRentalWorkflowRule() {
		return getRentalWorkflowAccess().getRule();
	}
	
	//Event:
	//	name=ID ofType=ofEventType;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//State:
	//	'state' name=ID ('events' '{' events+=[Event]+ '}')? 'transition' transition+=[State|QualifiedName] 'end';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//enum ofEventType:
	//	nextClickable | savable | deleteable='deletable';
	public OfEventTypeElements getOfEventTypeAccess() {
		return eOfEventType;
	}
	
	public EnumRule getOfEventTypeRule() {
		return getOfEventTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
