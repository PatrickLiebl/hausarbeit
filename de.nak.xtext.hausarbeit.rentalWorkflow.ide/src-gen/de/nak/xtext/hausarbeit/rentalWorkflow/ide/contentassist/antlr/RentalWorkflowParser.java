/*
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalWorkflow.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.nak.xtext.hausarbeit.rentalWorkflow.ide.contentassist.antlr.internal.InternalRentalWorkflowParser;
import de.nak.xtext.hausarbeit.rentalWorkflow.services.RentalWorkflowGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RentalWorkflowParser extends AbstractContentAssistParser {

	@Inject
	private RentalWorkflowGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRentalWorkflowParser createParser() {
		InternalRentalWorkflowParser result = new InternalRentalWorkflowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOfTypeAccess().getAlternatives(), "rule__OfType__Alternatives");
					put(grammarAccess.getRentalWorkflowAccess().getGroup(), "rule__RentalWorkflow__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getRentalWorkflowAccess().getNameAssignment_2(), "rule__RentalWorkflow__NameAssignment_2");
					put(grammarAccess.getRentalWorkflowAccess().getEventAssignment_4(), "rule__RentalWorkflow__EventAssignment_4");
					put(grammarAccess.getRentalWorkflowAccess().getResetEventsAssignment_7(), "rule__RentalWorkflow__ResetEventsAssignment_7");
					put(grammarAccess.getRentalWorkflowAccess().getCommandsAssignment_10(), "rule__RentalWorkflow__CommandsAssignment_10");
					put(grammarAccess.getRentalWorkflowAccess().getStatesAssignment_12(), "rule__RentalWorkflow__StatesAssignment_12");
					put(grammarAccess.getEventAccess().getNameAssignment_0(), "rule__Event__NameAssignment_0");
					put(grammarAccess.getEventAccess().getCodeAssignment_1(), "rule__Event__CodeAssignment_1");
					put(grammarAccess.getCommandAccess().getNameAssignment_0(), "rule__Command__NameAssignment_0");
					put(grammarAccess.getCommandAccess().getCodeAssignment_1(), "rule__Command__CodeAssignment_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getOfTypeAssignment_2(), "rule__State__OfTypeAssignment_2");
					put(grammarAccess.getStateAccess().getActionsAssignment_3_2(), "rule__State__ActionsAssignment_3_2");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_4(), "rule__State__TransitionsAssignment_4");
					put(grammarAccess.getTransitionAccess().getEventAssignment_0(), "rule__Transition__EventAssignment_0");
					put(grammarAccess.getTransitionAccess().getStateAssignment_2(), "rule__Transition__StateAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRentalWorkflowParser typedParser = (InternalRentalWorkflowParser) parser;
			typedParser.entryRuleRentalWorkflow();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RentalWorkflowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RentalWorkflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
