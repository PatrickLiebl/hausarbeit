/*
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalWorkflow.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.nak.xtext.hausarbeit.rentalWorkflow.ide.contentassist.antlr.internal.InternalRentalWorkflowParser;
import de.nak.xtext.hausarbeit.rentalWorkflow.services.RentalWorkflowGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RentalWorkflowParser extends AbstractContentAssistParser {

	@Inject
	private RentalWorkflowGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRentalWorkflowParser createParser() {
		InternalRentalWorkflowParser result = new InternalRentalWorkflowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOfEventTypeAccess().getAlternatives(), "rule__OfEventType__Alternatives");
					put(grammarAccess.getRentalWorkflowAccess().getGroup(), "rule__RentalWorkflow__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRentalWorkflowAccess().getNameAssignment_2(), "rule__RentalWorkflow__NameAssignment_2");
					put(grammarAccess.getRentalWorkflowAccess().getEventAssignment_4(), "rule__RentalWorkflow__EventAssignment_4");
					put(grammarAccess.getRentalWorkflowAccess().getStatesAssignment_6(), "rule__RentalWorkflow__StatesAssignment_6");
					put(grammarAccess.getRentalWorkflowAccess().getStartStateAssignment_8(), "rule__RentalWorkflow__StartStateAssignment_8");
					put(grammarAccess.getRentalWorkflowAccess().getFinishStateAssignment_11(), "rule__RentalWorkflow__FinishStateAssignment_11");
					put(grammarAccess.getEventAccess().getNameAssignment_0(), "rule__Event__NameAssignment_0");
					put(grammarAccess.getEventAccess().getOfTypeAssignment_1(), "rule__Event__OfTypeAssignment_1");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getEventsAssignment_2_2(), "rule__State__EventsAssignment_2_2");
					put(grammarAccess.getStateAccess().getTransitionAssignment_4(), "rule__State__TransitionAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRentalWorkflowParser typedParser = (InternalRentalWorkflowParser) parser;
			typedParser.entryRuleRentalWorkflow();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RentalWorkflowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RentalWorkflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
