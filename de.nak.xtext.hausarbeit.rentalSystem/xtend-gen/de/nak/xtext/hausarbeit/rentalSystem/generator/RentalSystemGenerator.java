/**
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalSystem.generator;

import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.Customer;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.Deal;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.RentalSystem;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.Type;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RentalSystemGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    final EObject rentalSystem = IterableExtensions.<EObject>head(_contents);
    if ((rentalSystem instanceof RentalSystem)) {
      String _name = ((RentalSystem)rentalSystem).getName();
      String _plus = (_name + ".html");
      CharSequence _html = this.toHtml(rentalSystem);
      fsa.generateFile(_plus, _html);
    }
  }
  
  protected CharSequence _toHtml(final RentalSystem rentalSystem) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<title>");
    EObject _eContainer = rentalSystem.eContainer();
    String _name = ((RentalSystem) _eContainer).getName();
    _builder.append(_name, "\t");
    _builder.append("</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Bootstrap -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link href=\"css/bootstrap.css\" rel=\"stylesheet\" media=\"screen\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<link href=\"css/survey.css\" rel=\"stylesheet\" media=\"screen\">");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script src=\"http://code.jquery.com/jquery.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script src=\"js/bootstrap.js\"></script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"navbar\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<div class=\"navbar-inner\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<a class=\"brand\" href=\"/\">XtextCon 2014 Workshop Survey</a>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<ul class=\"nav pull-right\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<li><a href=\"/evaluate\">Evaluate</a></li>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<form class=\"form-horizontal\" method=\"POST\" action=\"dispatch\" class=\"form-horizontal\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<input name=\"survey\" type=\"hidden\" value=\"");
    EObject _eContainer_1 = rentalSystem.eContainer();
    String _name_1 = ((RentalSystem) _eContainer_1).getName();
    _builder.append(_name_1, "\t\t\t\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("<input name=\"page\" type=\"hidden\" value=\"");
    String _name_2 = rentalSystem.getName();
    _builder.append(_name_2, "\t\t\t\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    {
      EList<Customer> _customers = rentalSystem.getCustomers();
      for(final Customer customer : _customers) {
        _builder.append("\t\t\t\t\t");
        CharSequence _html = this.toHtml(customer);
        _builder.append(_html, "\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Type> _types = rentalSystem.getTypes();
      for(final Type Type : _types) {
        _builder.append("\t\t\t\t\t");
        CharSequence _html_1 = this.toHtml(Type);
        _builder.append(_html_1, "\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Deal> _deals = rentalSystem.getDeals();
      for(final Deal Deal : _deals) {
        _builder.append("\t\t\t\t\t");
        CharSequence _html_2 = this.toHtml(Deal);
        _builder.append(_html_2, "\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<div class=\"control-group\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<div class=\"controls\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<input type=\"reset\" class=\"btn\" value=\"Reset\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<input type=\"submit\" class=\"btn\" value=\"Next\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _toHtml(final Customer customer) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>");
    String _name = customer.getName();
    _builder.append(_name, "");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _toHtml(final Type type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>");
    String _name = type.getName();
    _builder.append(_name, "");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _toHtml(final Deal deal) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>");
    String _name = deal.getName();
    _builder.append(_name, "");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence toHtml(final EObject customer) {
    if (customer instanceof Customer) {
      return _toHtml((Customer)customer);
    } else if (customer instanceof Deal) {
      return _toHtml((Deal)customer);
    } else if (customer instanceof RentalSystem) {
      return _toHtml((RentalSystem)customer);
    } else if (customer instanceof Type) {
      return _toHtml((Type)customer);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(customer).toString());
    }
  }
}
