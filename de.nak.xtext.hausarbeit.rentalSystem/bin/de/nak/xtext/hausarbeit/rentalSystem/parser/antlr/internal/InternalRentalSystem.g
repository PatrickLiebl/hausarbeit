/*
 * generated by Xtext 2.9.2
 */
grammar InternalRentalSystem;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.nak.xtext.hausarbeit.rentalSystem.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.nak.xtext.hausarbeit.rentalSystem.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.nak.xtext.hausarbeit.rentalSystem.services.RentalSystemGrammarAccess;

}

@parser::members {

 	private RentalSystemGrammarAccess grammarAccess;

    public InternalRentalSystemParser(TokenStream input, RentalSystemGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RentalSystem";
   	}

   	@Override
   	protected RentalSystemGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRentalSystem
entryRuleRentalSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRentalSystemRule()); }
	iv_ruleRentalSystem=ruleRentalSystem
	{ $current=$iv_ruleRentalSystem.current; }
	EOF;

// Rule RentalSystem
ruleRentalSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rentalSystem'
		{
			newLeafNode(otherlv_0, grammarAccess.getRentalSystemAccess().getRentalSystemKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRentalSystemAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRentalSystemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_title_2_0=RULE_STRING
				{
					newLeafNode(lv_title_2_0, grammarAccess.getRentalSystemAccess().getTitleSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRentalSystemRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getRentalSystemAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRentalSystemAccess().getRentalTypesRentalTypeParserRuleCall_4_0());
				}
				lv_rentalTypes_4_0=ruleRentalType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRentalSystemRule());
					}
					add(
						$current,
						"rentalTypes",
						lv_rentalTypes_4_0,
						"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.RentalType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRentalSystemAccess().getCustomersCustomerParserRuleCall_5_0());
				}
				lv_customers_5_0=ruleCustomer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRentalSystemRule());
					}
					add(
						$current,
						"customers",
						lv_customers_5_0,
						"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.Customer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRentalSystemAccess().getDealsDealParserRuleCall_6_0());
				}
				lv_deals_6_0=ruleDeal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRentalSystemRule());
					}
					add(
						$current,
						"deals",
						lv_deals_6_0,
						"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.Deal");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getRentalSystemAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleRentalType
entryRuleRentalType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRentalTypeRule()); }
	iv_ruleRentalType=ruleRentalType
	{ $current=$iv_ruleRentalType.current; }
	EOF;

// Rule RentalType
ruleRentalType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_movable_0_0='movable'
					{
						newLeafNode(lv_movable_0_0, grammarAccess.getRentalTypeAccess().getMovableMovableKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRentalTypeRule());
						}
						setWithLastConsumed($current, "movable", true, "movable");
					}
				)
			)
			    |
			(
				(
					lv_digital_1_0='digital'
					{
						newLeafNode(lv_digital_1_0, grammarAccess.getRentalTypeAccess().getDigitalDigitalKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRentalTypeRule());
						}
						setWithLastConsumed($current, "digital", true, "digital");
					}
				)
			)
			    |
			(
				(
					lv_fix_2_0='fix'
					{
						newLeafNode(lv_fix_2_0, grammarAccess.getRentalTypeAccess().getFixFixKeyword_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRentalTypeRule());
						}
						setWithLastConsumed($current, "fix", true, "fix");
					}
				)
			)
		)
		otherlv_3='typeMold'
		{
			newLeafNode(otherlv_3, grammarAccess.getRentalTypeAccess().getTypeMoldKeyword_1());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getRentalTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRentalTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getRentalTypeAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRentalTypeAccess().getTypeAttributesAttributeParserRuleCall_4_0());
				}
				lv_typeAttributes_6_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRentalTypeRule());
					}
					add(
						$current,
						"typeAttributes",
						lv_typeAttributes_6_0,
						"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getRentalTypeAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCustomer
entryRuleCustomer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomerRule()); }
	iv_ruleCustomer=ruleCustomer
	{ $current=$iv_ruleCustomer.current; }
	EOF;

// Rule Customer
ruleCustomer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='customerMold'
		{
			newLeafNode(otherlv_0, grammarAccess.getCustomerAccess().getCustomerMoldKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCustomerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCustomerAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getCustomerAttributeAttributeParserRuleCall_3_0());
				}
				lv_customerAttribute_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					add(
						$current,
						"customerAttribute",
						lv_customerAttribute_3_0,
						"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCustomerAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleDeal
entryRuleDeal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDealRule()); }
	iv_ruleDeal=ruleDeal
	{ $current=$iv_ruleDeal.current; }
	EOF;

// Rule Deal
ruleDeal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='deal'
		{
			newLeafNode(otherlv_0, grammarAccess.getDealAccess().getDealKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDealAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDealRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDealAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3='customer'
		{
			newLeafNode(otherlv_3, grammarAccess.getDealAccess().getCustomerKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDealRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getDealAccess().getCustomerCustomerCrossReference_4_0());
				}
			)
		)
		otherlv_5='rentalType'
		{
			newLeafNode(otherlv_5, grammarAccess.getDealAccess().getRentalTypeKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDealRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getDealAccess().getRentalTypeRentalTypeCrossReference_6_0());
				}
			)
		)
		otherlv_7='dealWorkflow'
		{
			newLeafNode(otherlv_7, grammarAccess.getDealAccess().getDealWorkflowKeyword_7());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDealRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDealAccess().getRentalWorkflowRentalWorkflowCrossReference_8_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9='dealAttribute'
			{
				newLeafNode(otherlv_9, grammarAccess.getDealAccess().getDealAttributeKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDealAccess().getDealAttributesAttributeParserRuleCall_9_1_0());
					}
					lv_dealAttributes_10_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDealRule());
						}
						add(
							$current,
							"dealAttributes",
							lv_dealAttributes_10_0,
							"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_11=')'
		{
			newLeafNode(otherlv_11, grammarAccess.getDealAccess().getRightParenthesisKeyword_10());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getOfTypeOfTypeEnumRuleCall_2_0());
				}
				lv_ofType_2_0=ruleOfType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"ofType",
						lv_ofType_2_0,
						"de.nak.xtext.hausarbeit.rentalSystem.RentalSystem.OfType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule OfType
ruleOfType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getOfTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOfTypeAccess().getIntEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='String'
			{
				$current = grammarAccess.getOfTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOfTypeAccess().getStringEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Date'
			{
				$current = grammarAccess.getOfTypeAccess().getDateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOfTypeAccess().getDateEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Double'
			{
				$current = grammarAccess.getOfTypeAccess().getDoubleEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOfTypeAccess().getDoubleEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='boolean'
			{
				$current = grammarAccess.getOfTypeAccess().getBooleanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOfTypeAccess().getBooleanEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
