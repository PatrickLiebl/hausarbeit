/**
 * generated by Xtext 2.9.2
 */
package de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.impl;

import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.Attribute;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.Customer;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.Deal;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.RentalSystemPackage;
import de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.RentalType;

import de.nak.xtext.hausarbeit.rentalWorkflow.rentalWorkflow.RentalWorkflow;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Deal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.impl.DealImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.impl.DealImpl#getCustomer <em>Customer</em>}</li>
 *   <li>{@link de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.impl.DealImpl#getRentalType <em>Rental Type</em>}</li>
 *   <li>{@link de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.impl.DealImpl#getRentalWorkflow <em>Rental Workflow</em>}</li>
 *   <li>{@link de.nak.xtext.hausarbeit.rentalSystem.rentalSystem.impl.DealImpl#getDealAttributes <em>Deal Attributes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DealImpl extends MinimalEObjectImpl.Container implements Deal
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCustomer() <em>Customer</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCustomer()
   * @generated
   * @ordered
   */
  protected Customer customer;

  /**
   * The cached value of the '{@link #getRentalType() <em>Rental Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRentalType()
   * @generated
   * @ordered
   */
  protected RentalType rentalType;

  /**
   * The cached value of the '{@link #getRentalWorkflow() <em>Rental Workflow</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRentalWorkflow()
   * @generated
   * @ordered
   */
  protected RentalWorkflow rentalWorkflow;

  /**
   * The cached value of the '{@link #getDealAttributes() <em>Deal Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDealAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> dealAttributes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DealImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RentalSystemPackage.Literals.DEAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RentalSystemPackage.DEAL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Customer getCustomer()
  {
    if (customer != null && customer.eIsProxy())
    {
      InternalEObject oldCustomer = (InternalEObject)customer;
      customer = (Customer)eResolveProxy(oldCustomer);
      if (customer != oldCustomer)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RentalSystemPackage.DEAL__CUSTOMER, oldCustomer, customer));
      }
    }
    return customer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Customer basicGetCustomer()
  {
    return customer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCustomer(Customer newCustomer)
  {
    Customer oldCustomer = customer;
    customer = newCustomer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RentalSystemPackage.DEAL__CUSTOMER, oldCustomer, customer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RentalType getRentalType()
  {
    if (rentalType != null && rentalType.eIsProxy())
    {
      InternalEObject oldRentalType = (InternalEObject)rentalType;
      rentalType = (RentalType)eResolveProxy(oldRentalType);
      if (rentalType != oldRentalType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RentalSystemPackage.DEAL__RENTAL_TYPE, oldRentalType, rentalType));
      }
    }
    return rentalType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RentalType basicGetRentalType()
  {
    return rentalType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRentalType(RentalType newRentalType)
  {
    RentalType oldRentalType = rentalType;
    rentalType = newRentalType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RentalSystemPackage.DEAL__RENTAL_TYPE, oldRentalType, rentalType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RentalWorkflow getRentalWorkflow()
  {
    if (rentalWorkflow != null && rentalWorkflow.eIsProxy())
    {
      InternalEObject oldRentalWorkflow = (InternalEObject)rentalWorkflow;
      rentalWorkflow = (RentalWorkflow)eResolveProxy(oldRentalWorkflow);
      if (rentalWorkflow != oldRentalWorkflow)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RentalSystemPackage.DEAL__RENTAL_WORKFLOW, oldRentalWorkflow, rentalWorkflow));
      }
    }
    return rentalWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RentalWorkflow basicGetRentalWorkflow()
  {
    return rentalWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRentalWorkflow(RentalWorkflow newRentalWorkflow)
  {
    RentalWorkflow oldRentalWorkflow = rentalWorkflow;
    rentalWorkflow = newRentalWorkflow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RentalSystemPackage.DEAL__RENTAL_WORKFLOW, oldRentalWorkflow, rentalWorkflow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Attribute> getDealAttributes()
  {
    if (dealAttributes == null)
    {
      dealAttributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, RentalSystemPackage.DEAL__DEAL_ATTRIBUTES);
    }
    return dealAttributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RentalSystemPackage.DEAL__DEAL_ATTRIBUTES:
        return ((InternalEList<?>)getDealAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RentalSystemPackage.DEAL__NAME:
        return getName();
      case RentalSystemPackage.DEAL__CUSTOMER:
        if (resolve) return getCustomer();
        return basicGetCustomer();
      case RentalSystemPackage.DEAL__RENTAL_TYPE:
        if (resolve) return getRentalType();
        return basicGetRentalType();
      case RentalSystemPackage.DEAL__RENTAL_WORKFLOW:
        if (resolve) return getRentalWorkflow();
        return basicGetRentalWorkflow();
      case RentalSystemPackage.DEAL__DEAL_ATTRIBUTES:
        return getDealAttributes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RentalSystemPackage.DEAL__NAME:
        setName((String)newValue);
        return;
      case RentalSystemPackage.DEAL__CUSTOMER:
        setCustomer((Customer)newValue);
        return;
      case RentalSystemPackage.DEAL__RENTAL_TYPE:
        setRentalType((RentalType)newValue);
        return;
      case RentalSystemPackage.DEAL__RENTAL_WORKFLOW:
        setRentalWorkflow((RentalWorkflow)newValue);
        return;
      case RentalSystemPackage.DEAL__DEAL_ATTRIBUTES:
        getDealAttributes().clear();
        getDealAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RentalSystemPackage.DEAL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RentalSystemPackage.DEAL__CUSTOMER:
        setCustomer((Customer)null);
        return;
      case RentalSystemPackage.DEAL__RENTAL_TYPE:
        setRentalType((RentalType)null);
        return;
      case RentalSystemPackage.DEAL__RENTAL_WORKFLOW:
        setRentalWorkflow((RentalWorkflow)null);
        return;
      case RentalSystemPackage.DEAL__DEAL_ATTRIBUTES:
        getDealAttributes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RentalSystemPackage.DEAL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RentalSystemPackage.DEAL__CUSTOMER:
        return customer != null;
      case RentalSystemPackage.DEAL__RENTAL_TYPE:
        return rentalType != null;
      case RentalSystemPackage.DEAL__RENTAL_WORKFLOW:
        return rentalWorkflow != null;
      case RentalSystemPackage.DEAL__DEAL_ATTRIBUTES:
        return dealAttributes != null && !dealAttributes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DealImpl
